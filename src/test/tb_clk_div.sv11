// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2015-2016, Lars Asplund lars.anders.asplund@gmail.com

// You do not need to worry about adding vunit_defines.svh to your
// include path, VUnit will automatically do that for you if VUnit is
// correctly installed (and your python run-script is correct).
`include "vunit_defines.svh"

module tb_clk_div;
   localparam integer clk_period = 500; // ns
   localparam freq_clk = 2_000_000;
   localparam freq_out =   250_000;
   localparam freq_div = freq_clk / freq_out;

   integer count = 0;
   integer test_cycles = 20;

   logic clk_in = 1'b0;
   logic aclr = 1'b1;
   logic clk_out;


   `TEST_SUITE begin
      // Note: Do not place any code here (unless you are debugging
      // VUnit internals).

      `TEST_SUITE_SETUP begin
         // Here you will typically place things that are common to
         // all tests, such as asserting the reset signal and starting
         // the clock(s).
         $display("Running test suite setup code");
      end

      `TEST_CASE_SETUP begin
         // By default VUnit will run each test separately. However,
         // advanced users may want to run tests consecutively rather
         // than in separate instances of the HDL-simulator. In that
         // case the code placed in a TEST_CASE_SETUP block should
         // restore the unit under test to the state expected by the
         // test cases below. In many cases this block would only
         // assert/deassert the reset signal for a couple of
         // clock-cycles.
         //
         // When trying out VUnit for the first time this section
         // should probably be left empty.
         $display("Running test case setup code"); 
      end

      `TEST_CASE("test_aclr") begin
         // в начальный момент на выходе состояние x
         aclr = 1;
         `CHECK_EQUAL(clk_out, 1'bx);
         #(clk_period * 1ns);

         // в дальнейшем должен быть 0
         for (int i = 0; i < test_cycles; i++) begin
            $display("i: %0d, clk_out: %0b", i, clk_out);
            `CHECK_EQUAL(clk_out, 0);

            #(clk_period * 1ns);
         end

         // убираем aclr, на выходе должен быть 0
         aclr = 0;
         `CHECK_EQUAL(clk_out, 0);

         // по следующему фронту устанавливается 1
         #(clk_period * 1ns);
         `CHECK_EQUAL(clk_out, 1);

         // при сбросе, на выходе должен быть 0
         aclr = 1; 
         #(1ps);
         `CHECK_EQUAL(clk_out, 0);  
      end

      `TEST_CASE("test_clk_div") begin
         // в начальный момент на выходе состояние x
         #(clk_period * 1ns);

         aclr = 0;
         // в момент снятия aclr сигнал на выходе 0
         `CHECK_EQUAL(clk_out, 1'b0);

         #(clk_period * 1ns);
         // в дальнейшем делитель должен быть freq_div
         count = 0;
         for (int i = 0; i < (test_cycles*freq_div); i++) begin
            if (clk_out == 1'b1) begin
               count = count + 1;
            end

            #(clk_period * 1ns);
         end
         `CHECK_EQUAL(count, test_cycles*freq_div/2);
      end

//      `TEST_CASE("Test that a failing test case actually fails") begin
//         $display("This test case is expected to fail");
//         `CHECK_EQUAL(0, 1, "You may also optionally add a diagnostic message to CHECK_EQUAL");
//         // Note: A test case will also be marked as failing if the
//         // simulator stops for other reasons before the end of the
//         // TEST_SUITE block is reached. This means that you don't
//         // need to use CHECK_EQUAL if the testbench you want to
//         // convert to VUnit already contains code that for example
//         // calls $stop if an error-condition is detected.
//      end

//      `TEST_CASE("Test that a test case that takes too long time fails with a timeout") begin
//         $display("This test is expected to timeout because of the watch dog below.");
//         #2ns; //
//      end

      `TEST_CASE_CLEANUP begin
         // This section will run after the end of a test case. In
         // many cases this section will not be needed.
         $display("Cleaning up after a test case");
      end

      `TEST_SUITE_CLEANUP begin
         // This section will run last before the TEST_SUITE block
         // exits. In many cases this section will not be needed.
         $display("Cleaning up after running the complete test suite");
      end
   end;

   // The watchdog macro is optional, but recommended. If present, it
   // must not be placed inside any initial or always-block.
   `WATCHDOG(1ms);

   always begin
      #(clk_period/2 * 1ns);
      clk_in <= !clk_in;
   end

   clk_div # (.FREQ_CLK(freq_clk), .FREQ_OUT(freq_out)) dut(.*);

endmodule